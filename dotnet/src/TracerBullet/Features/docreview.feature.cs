// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace SpecFlowProject1.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class DocReviewFeature : object, Xunit.IClassFixture<DocReviewFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "docreview.feature"
#line hidden
        
        public DocReviewFeature(DocReviewFeature.FixtureData fixtureData, SpecFlowProject1_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "DocReview", null, ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public void TestInitialize()
        {
        }
        
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 3
    #line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "isCommentingAllowed",
                        "isSubcommentingAllowed",
                        "AreEmojiOnCommentsAllowed",
                        "isClosedForcomments",
                        "isLoginRequired"});
            table1.AddRow(new string[] {
                        "true",
                        "true",
                        "true",
                        "false",
                        "false"});
            table1.AddRow(new string[] {
                        "true",
                        "true",
                        "true",
                        "false",
                        "false"});
#line 4
        testRunner.Given("DocReviewSettings:", ((string)(null)), table1, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "userId",
                        "firstname",
                        "lastname",
                        "email",
                        "password"});
            table2.AddRow(new string[] {
                        "1",
                        "sander",
                        "Verheyen",
                        "sander.verheyen@student.kdg.be",
                        "sander"});
            table2.AddRow(new string[] {
                        "2",
                        "niels",
                        "Van Steen",
                        "niels.vansteen@student.kdg.be",
                        "niels"});
#line 9
        testRunner.Given("Users:", ((string)(null)), table2, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "docreview",
                        "docreviewname",
                        "commentAmount",
                        "description",
                        "bannerImagePath",
                        "docReviewText",
                        "writtenbyId"});
            table3.AddRow(new string[] {
                        "1",
                        "doopcharter",
                        "2",
                        "doopcharter",
                        "/image.jpg",
                        "some text",
                        "1"});
            table3.AddRow(new string[] {
                        "2",
                        "gemeentedebat",
                        "5",
                        "debat",
                        "/image.png",
                        "some text",
                        "1"});
#line 14
        testRunner.Given("DocReviews:", ((string)(null)), table3, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "comment",
                        "commentText",
                        "user",
                        "docreview",
                        "subcomment"});
            table4.AddRow(new string[] {
                        "1",
                        "Dit is een comment",
                        "1",
                        "2",
                        "null"});
            table4.AddRow(new string[] {
                        "2",
                        "Dit is nog een comment",
                        "2",
                        "2",
                        "null"});
            table4.AddRow(new string[] {
                        "3",
                        "Dit is weer een comment",
                        "1",
                        "1",
                        "null"});
            table4.AddRow(new string[] {
                        "4",
                        "Dit document trekt op niks....",
                        "2",
                        "1",
                        "null"});
#line 19
        testRunner.Given("Comments:", ((string)(null)), table4, "Given ");
#line hidden
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Showing all comments from DocReview")]
        [Xunit.TraitAttribute("FeatureTitle", "DocReview")]
        [Xunit.TraitAttribute("Description", "Showing all comments from DocReview")]
        public void ShowingAllCommentsFromDocReview()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Showing all comments from DocReview", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 26
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
    this.FeatureBackground();
#line hidden
#line 27
        testRunner.Given("There is a docReview 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 28
        testRunner.When("DocReview 1 loads", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                            "comment",
                            "commentText",
                            "user",
                            "docreview",
                            "subcomment"});
                table5.AddRow(new string[] {
                            "3",
                            "Dit is weer een comment",
                            "1",
                            "1",
                            "null"});
                table5.AddRow(new string[] {
                            "4",
                            "Dit document trekt op niks....",
                            "2",
                            "1",
                            "null"});
#line 29
        testRunner.Then("the comments should contain the following comments:", ((string)(null)), table5, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Adding a comment to a DocReview")]
        [Xunit.TraitAttribute("FeatureTitle", "DocReview")]
        [Xunit.TraitAttribute("Description", "Adding a comment to a DocReview")]
        public void AddingACommentToADocReview()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Adding a comment to a DocReview", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 34
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
    this.FeatureBackground();
#line hidden
#line 35
        testRunner.Given("There is a docReview 2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 36
        testRunner.And("User 1 is logged in", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 37
        testRunner.When("User 1 writes a comment 5 \"Dit is een comment op docreview 2\" on characters 5 - 3" +
                        "5", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 38
        testRunner.And("Clicks the publish button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 39
        testRunner.Then("DocReview 2 now has 3 comments", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 40
        testRunner.And("User 1 has comment 5", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 41
        testRunner.And("DocReview 2 page now shows comment 5", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Adding a comment on a comment")]
        [Xunit.TraitAttribute("FeatureTitle", "DocReview")]
        [Xunit.TraitAttribute("Description", "Adding a comment on a comment")]
        public void AddingACommentOnAComment()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Adding a comment on a comment", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 43
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
    this.FeatureBackground();
#line hidden
#line 44
        testRunner.Given("User 1 has a comment 3 on DocReview 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 45
        testRunner.And("User 2 is logged in", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 46
        testRunner.When("User 2 writes a comment 6 \"Dit is een comment op comment 1\" on comment 3", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 47
        testRunner.And("User 2 clicks the publish button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 48
        testRunner.Then("comment 3 should have a subcomment: comment 6", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                DocReviewFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                DocReviewFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
