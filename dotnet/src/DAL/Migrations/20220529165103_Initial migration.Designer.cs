// <auto-generated />
using System;
using DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DAL.Migrations
{
    [DbContext(typeof(DocReviewDbContext))]
    [Migration("20220529165103_Initial migration")]
    partial class Initialmigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Domain.Comment.CommentHistory", b =>
                {
                    b.Property<int>("CommentHistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<byte>("CommentStatus")
                        .HasColumnType("tinyint unsigned");

                    b.Property<string>("EditedById")
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("EditedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("ReactionGroupId")
                        .HasColumnType("int");

                    b.HasKey("CommentHistoryId");

                    b.HasIndex("EditedById");

                    b.HasIndex("ReactionGroupId");

                    b.ToTable("CommentHistories");
                });

            modelBuilder.Entity("Domain.Comment.CommentTag", b =>
                {
                    b.Property<int>("CommentTagId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("PlacedByUserId")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("ProjectTagId")
                        .HasColumnType("int");

                    b.Property<int>("ReactionGroupId")
                        .HasColumnType("int");

                    b.HasKey("CommentTagId");

                    b.HasIndex("PlacedByUserId");

                    b.HasIndex("ReactionGroupId");

                    b.HasIndex("ProjectTagId", "ReactionGroupId")
                        .IsUnique();

                    b.ToTable("CommentTags");
                });

            modelBuilder.Entity("Domain.Comment.Reaction", b =>
                {
                    b.Property<int>("CommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("DocReviewId")
                        .HasColumnType("int");

                    b.Property<int?>("PlacedOnReactionGroupId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("CommentId");

                    b.HasIndex("DocReviewId");

                    b.HasIndex("PlacedOnReactionGroupId");

                    b.HasIndex("UserId");

                    b.ToTable("CommentComposites", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("Reaction");
                });

            modelBuilder.Entity("Domain.DocReview.DocReview", b =>
                {
                    b.Property<int>("DocReviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("DocReviewText")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<string>("WrittenById")
                        .HasColumnType("varchar(255)");

                    b.HasKey("DocReviewId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("WrittenById");

                    b.ToTable("DocReviews");
                });

            modelBuilder.Entity("Domain.DocReview.DocReviewHistory", b =>
                {
                    b.Property<int>("DocReviewHistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("DocReviewId")
                        .HasColumnType("int");

                    b.Property<int>("DocReviewStatus")
                        .HasColumnType("int");

                    b.Property<DateTime>("EditedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("EditorId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("DocReviewHistoryId");

                    b.HasIndex("DocReviewId");

                    b.HasIndex("EditorId");

                    b.ToTable("DocReviewHistories");
                });

            modelBuilder.Entity("Domain.DocReview.Emoji", b =>
                {
                    b.Property<int>("EmojiId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<int?>("DocReviewId")
                        .HasColumnType("int");

                    b.HasKey("EmojiId");

                    b.HasIndex("DocReviewId");

                    b.HasIndex("Code", "DocReviewId");

                    b.ToTable("Emojis");

                    b.HasData(
                        new
                        {
                            EmojiId = 1,
                            Code = "128545"
                        },
                        new
                        {
                            EmojiId = 2,
                            Code = "128514"
                        },
                        new
                        {
                            EmojiId = 3,
                            Code = "129315"
                        },
                        new
                        {
                            EmojiId = 4,
                            Code = "129300"
                        },
                        new
                        {
                            EmojiId = 5,
                            Code = "128078"
                        });
                });

            modelBuilder.Entity("Domain.DocReview.Survey", b =>
                {
                    b.Property<int>("SurveyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("AreMultipleOptionsAllowed")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("BeginChar")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("DocReviewId")
                        .HasColumnType("int");

                    b.Property<int>("EndChar")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("SurveyId");

                    b.HasIndex("DocReviewId");

                    b.ToTable("Surveys");
                });

            modelBuilder.Entity("Domain.DocReview.SurveyOption", b =>
                {
                    b.Property<int>("SurveyOptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<string>("Option")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("SurveyId")
                        .HasColumnType("int");

                    b.HasKey("SurveyOptionId");

                    b.HasIndex("SurveyId");

                    b.ToTable("SurveyOptions");
                });

            modelBuilder.Entity("Domain.DocReview.UserSurveyAnswer", b =>
                {
                    b.Property<int>("UserSurveyAnswerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("ChosenOptionId")
                        .HasColumnType("int");

                    b.Property<int>("SurveyId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserSurveyAnswerId");

                    b.HasIndex("ChosenOptionId");

                    b.HasIndex("SurveyId");

                    b.HasIndex("UserId");

                    b.ToTable("SurveyAnswers");
                });

            modelBuilder.Entity("Domain.Project.FooterLogo", b =>
                {
                    b.Property<int>("FooterLogoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ImageName")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.HasKey("FooterLogoId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("ImageName", "ProjectId")
                        .IsUnique();

                    b.ToTable("ProjectFooterLogos", (string)null);
                });

            modelBuilder.Entity("Domain.Project.Project", b =>
                {
                    b.Property<int>("ProjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("AccessibilityStatement")
                        .HasColumnType("longtext");

                    b.Property<string>("ExternalName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("InternalName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Introduction")
                        .HasColumnType("longtext");

                    b.Property<string>("PrivacyStatement")
                        .HasColumnType("longtext");

                    b.Property<int?>("ProjectStylingId")
                        .HasColumnType("int");

                    b.Property<string>("ProjectTitle")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.HasKey("ProjectId");

                    b.HasIndex("ExternalName")
                        .IsUnique();

                    b.HasIndex("InternalName")
                        .IsUnique();

                    b.HasIndex("ProjectStylingId")
                        .IsUnique();

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("Domain.Project.ProjectHistory", b =>
                {
                    b.Property<int>("ProjectHistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("EditedById")
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("EditedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<int>("ProjectStatus")
                        .HasColumnType("int");

                    b.HasKey("ProjectHistoryId");

                    b.HasIndex("EditedById");

                    b.HasIndex("ProjectId");

                    b.ToTable("ProjectHistories");
                });

            modelBuilder.Entity("Domain.Project.ProjectStyling", b =>
                {
                    b.Property<int>("ProjectStylingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("FontSansSerif")
                        .HasColumnType("longtext");

                    b.Property<string>("FontSerif")
                        .HasColumnType("longtext");

                    b.Property<int>("ThemeStylesId")
                        .HasColumnType("int");

                    b.HasKey("ProjectStylingId");

                    b.HasIndex("ThemeStylesId");

                    b.ToTable("ProjectStylings");
                });

            modelBuilder.Entity("Domain.Project.ProjectTag", b =>
                {
                    b.Property<int>("ProjectTagId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsTextWhite")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.HasKey("ProjectTagId");

                    b.HasIndex("ProjectId", "Name")
                        .IsUnique();

                    b.ToTable("ProjectTags", (string)null);
                });

            modelBuilder.Entity("Domain.Project.ThemeStyles", b =>
                {
                    b.Property<int>("ThemeStylesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ColorDark")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ColorDarkest")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ColorLight")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ColorMedium")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("GenericName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("ProjectId")
                        .HasColumnType("int");

                    b.HasKey("ThemeStylesId");

                    b.HasIndex("ProjectId");

                    b.ToTable("ThemeStyles");

                    b.HasData(
                        new
                        {
                            ThemeStylesId = 1,
                            ColorDark = "3F3F3F",
                            ColorDarkest = "000000",
                            ColorLight = "000000",
                            ColorMedium = "3F3F3F",
                            DisplayName = "KdG",
                            GenericName = "Black & White"
                        },
                        new
                        {
                            ThemeStylesId = 2,
                            ColorDark = "6A783B",
                            ColorDarkest = "283618",
                            ColorLight = "90A955",
                            ColorMedium = "7A8E49",
                            DisplayName = "Forest Fresh",
                            GenericName = "Green"
                        },
                        new
                        {
                            ThemeStylesId = 3,
                            ColorDark = "54a0ff",
                            ColorDarkest = "2e86de",
                            ColorLight = "A4DDED",
                            ColorMedium = "73C2FB",
                            DisplayName = "Deep Sky Blue",
                            GenericName = "Light Blue"
                        },
                        new
                        {
                            ThemeStylesId = 4,
                            ColorDark = "0077B6",
                            ColorDarkest = "003459",
                            ColorLight = "00a8e8",
                            ColorMedium = "0096C7",
                            DisplayName = "Ocean Breeze",
                            GenericName = "Blue"
                        },
                        new
                        {
                            ThemeStylesId = 5,
                            ColorDark = "FF6000",
                            ColorDarkest = "FF4800",
                            ColorLight = "F8C537",
                            ColorMedium = "FF8500",
                            DisplayName = "Summer Hot",
                            GenericName = "Yellow"
                        },
                        new
                        {
                            ThemeStylesId = 6,
                            ColorDark = "9D0208",
                            ColorDarkest = "6A040F",
                            ColorLight = "Ef3907",
                            ColorMedium = "D00000",
                            DisplayName = "Fiery Red",
                            GenericName = "Red"
                        },
                        new
                        {
                            ThemeStylesId = 7,
                            ColorDark = "6F1D1B",
                            ColorDarkest = "582F0E",
                            ColorLight = "A68A64",
                            ColorMedium = "936639",
                            DisplayName = "Autumn Leaves",
                            GenericName = "Brown"
                        },
                        new
                        {
                            ThemeStylesId = 8,
                            ColorDark = "B56576",
                            ColorDarkest = "6D597A",
                            ColorLight = "EAAC8B",
                            ColorMedium = "E56B6F",
                            DisplayName = "Pink",
                            GenericName = "Pink"
                        },
                        new
                        {
                            ThemeStylesId = 9,
                            ColorDark = "0AEFFF",
                            ColorDarkest = "147DF5",
                            ColorLight = "DEFF0A",
                            ColorMedium = "0AFF99",
                            DisplayName = "Eye Burn",
                            GenericName = "Neon"
                        },
                        new
                        {
                            ThemeStylesId = 10,
                            ColorDark = "6411AD",
                            ColorDarkest = "47126B",
                            ColorLight = "C05299",
                            ColorMedium = "973AA8",
                            DisplayName = "Purple",
                            GenericName = "Purple"
                        },
                        new
                        {
                            ThemeStylesId = 11,
                            ColorDark = "798478",
                            ColorDarkest = "4D6A6D",
                            ColorLight = "C9ADA1",
                            ColorMedium = "A0A083",
                            DisplayName = "Boredom Grey",
                            GenericName = "Saturated Grey"
                        });
                });

            modelBuilder.Entity("Domain.Project.TimeLine", b =>
                {
                    b.Property<int>("TimeLineId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.HasKey("TimeLineId");

                    b.HasIndex("ProjectId")
                        .IsUnique();

                    b.ToTable("TimeLines");
                });

            modelBuilder.Entity("Domain.Project.TimeLinePhase", b =>
                {
                    b.Property<int>("TimeLinePhaseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("BeginDate")
                        .HasColumnType("date");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<int?>("DocReviewId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("TimeLineId")
                        .HasColumnType("int");

                    b.HasKey("TimeLinePhaseId");

                    b.HasIndex("DocReviewId");

                    b.HasIndex("TimeLineId");

                    b.ToTable("TimeLinePhases");
                });

            modelBuilder.Entity("Domain.ProjectStatistics.CommentStatusTotal", b =>
                {
                    b.Property<int>("CommentStatusTotalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<byte>("CommentStatus")
                        .HasColumnType("tinyint unsigned");

                    b.Property<int>("ProjectStatisticsId")
                        .HasColumnType("int");

                    b.Property<int>("Total")
                        .HasColumnType("int");

                    b.HasKey("CommentStatusTotalId");

                    b.HasIndex("ProjectStatisticsId");

                    b.ToTable("CommentStatusTotals");
                });

            modelBuilder.Entity("Domain.ProjectStatistics.DocReviewStatusTotal", b =>
                {
                    b.Property<int>("DocReviewStatusTotalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("DocReviewStatus")
                        .HasColumnType("int");

                    b.Property<int>("ProjectStatisticsId")
                        .HasColumnType("int");

                    b.Property<int>("Total")
                        .HasColumnType("int");

                    b.HasKey("DocReviewStatusTotalId");

                    b.HasIndex("ProjectStatisticsId");

                    b.ToTable("DocReviewStatusTotals");
                });

            modelBuilder.Entity("Domain.ProjectStatistics.EmojiTypeTotal", b =>
                {
                    b.Property<int>("EmojiTypeTotalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("EmojiId")
                        .HasColumnType("int");

                    b.Property<int>("ProjectStatisticsId")
                        .HasColumnType("int");

                    b.Property<int>("Total")
                        .HasColumnType("int");

                    b.HasKey("EmojiTypeTotalId");

                    b.HasIndex("EmojiId");

                    b.HasIndex("ProjectStatisticsId");

                    b.ToTable("EmojiTypeTotals");
                });

            modelBuilder.Entity("Domain.ProjectStatistics.ProjectStatistics", b =>
                {
                    b.Property<int>("ProjectStatisticsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("DocReviewsAmount")
                        .HasColumnType("int");

                    b.Property<int>("EmojiAmount")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("ManagersAmount")
                        .HasColumnType("int");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<int>("ReactionGroupAmount")
                        .HasColumnType("int");

                    b.Property<int>("UsersAmount")
                        .HasColumnType("int");

                    b.HasKey("ProjectStatisticsId");

                    b.HasIndex("ProjectId");

                    b.ToTable("ProjectStatistics");
                });

            modelBuilder.Entity("Domain.User.MarkedEmail", b =>
                {
                    b.Property<int>("MarkedEmailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<byte>("UserRole")
                        .HasColumnType("tinyint unsigned");

                    b.HasKey("MarkedEmailId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("MarkedEmails");
                });

            modelBuilder.Entity("Domain.User.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("HasProfilePicture")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "5938ddaa-f5e7-4259-8ebe-2b35c14326d8",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "632f66a0-1829-4d89-9e2b-31391270d084",
                            Email = "admin@groenpunt.be",
                            EmailConfirmed = true,
                            Firstname = "Groenpunt",
                            HasProfilePicture = false,
                            Lastname = "Root Admin",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@GROENPUNT.BE",
                            NormalizedUserName = "ADMIN@GROENPUNT.BE_ADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAELIqx/HvWn22Fv58gvJC0JmAxwur/wRGLuw2fKoqz1pgxwkTnxjMKpnPURLwvAKTLQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d09f62cd-dffe-47bf-830d-baced85b5b13",
                            TwoFactorEnabled = false,
                            UserName = "admin@groenpunt.be_admin"
                        });
                });

            modelBuilder.Entity("Domain.User.UserPropertyName", b =>
                {
                    b.Property<int>("UserPropertyNameId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("RegisteredForProjectId")
                        .HasColumnType("int");

                    b.Property<string>("UserPropertyLabel")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<byte>("UserPropertyType")
                        .HasColumnType("tinyint unsigned");

                    b.HasKey("UserPropertyNameId");

                    b.HasIndex("RegisteredForProjectId");

                    b.HasIndex("UserPropertyLabel", "RegisteredForProjectId")
                        .IsUnique();

                    b.ToTable("UserPropertiesNames");
                });

            modelBuilder.Entity("Domain.User.UserPropertyValue", b =>
                {
                    b.Property<int>("UserPropertyValueId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<int>("UserPropertyLabel")
                        .HasColumnType("int");

                    b.Property<int>("UserPropertyNameId")
                        .HasColumnType("int");

                    b.HasKey("UserPropertyValueId");

                    b.HasIndex("UserId");

                    b.HasIndex("UserPropertyLabel");

                    b.ToTable("UserPropertyValues", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("UserPropertyValue");
                });

            modelBuilder.Entity("MarkedEmailProject", b =>
                {
                    b.Property<int>("MarkedEmailsMarkedEmailId")
                        .HasColumnType("int");

                    b.Property<int>("ProjectsProjectId")
                        .HasColumnType("int");

                    b.HasKey("MarkedEmailsMarkedEmailId", "ProjectsProjectId");

                    b.HasIndex("ProjectsProjectId");

                    b.ToTable("MarkedEmailProject", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("Roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "RegularUser",
                            ConcurrencyStamp = "0a46b56b-de43-4322-a941-7acb26d38a9e",
                            Name = "RegularUser",
                            NormalizedName = "REGULARUSER"
                        },
                        new
                        {
                            Id = "ProjectManager",
                            ConcurrencyStamp = "d994a042-7de5-45d5-b707-ee40571f4b03",
                            Name = "ProjectManager",
                            NormalizedName = "PROJECTMANAGER"
                        },
                        new
                        {
                            Id = "Admin",
                            ConcurrencyStamp = "fc91912b-90fc-4262-bb97-f06ba29675d4",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "5938ddaa-f5e7-4259-8ebe-2b35c14326d8",
                            RoleId = "Admin"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens", (string)null);
                });

            modelBuilder.Entity("ProjectUser", b =>
                {
                    b.Property<int>("RegisteredForProjectsProjectId")
                        .HasColumnType("int");

                    b.Property<string>("UsersId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("RegisteredForProjectsProjectId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("ProjectUser");
                });

            modelBuilder.Entity("Domain.Comment.EmojiReaction", b =>
                {
                    b.HasBaseType("Domain.Comment.Reaction");

                    b.Property<int>("EmojiId")
                        .HasColumnType("int");

                    b.HasIndex("EmojiId");

                    b.HasDiscriminator().HasValue("EmojiReaction");
                });

            modelBuilder.Entity("Domain.Comment.ReactionGroup", b =>
                {
                    b.HasBaseType("Domain.Comment.Reaction");

                    b.Property<int?>("BeginChar")
                        .HasColumnType("int");

                    b.Property<string>("CommentText")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("EndChar")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("ReactionGroup");
                });

            modelBuilder.Entity("Domain.User.UserPropertyDateValue", b =>
                {
                    b.HasBaseType("Domain.User.UserPropertyValue");

                    b.Property<DateTime?>("Value")
                        .HasColumnType("date")
                        .HasColumnName("UserPropertyDateValue_Value");

                    b.HasDiscriminator().HasValue("UserPropertyDateValue");
                });

            modelBuilder.Entity("Domain.User.UserPropertyDecimalValue", b =>
                {
                    b.HasBaseType("Domain.User.UserPropertyValue");

                    b.Property<double?>("Value")
                        .HasColumnType("double")
                        .HasColumnName("UserPropertyDecimalValue_Value");

                    b.HasDiscriminator().HasValue("UserPropertyDecimalValue");
                });

            modelBuilder.Entity("Domain.User.UserPropertyNumericValue", b =>
                {
                    b.HasBaseType("Domain.User.UserPropertyValue");

                    b.Property<int?>("Value")
                        .HasColumnType("int")
                        .HasColumnName("UserPropertyNumericValue_Value");

                    b.HasDiscriminator().HasValue("UserPropertyNumericValue");
                });

            modelBuilder.Entity("Domain.User.UserPropertyStringValue", b =>
                {
                    b.HasBaseType("Domain.User.UserPropertyValue");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasDiscriminator().HasValue("UserPropertyStringValue");
                });

            modelBuilder.Entity("Domain.Comment.CommentHistory", b =>
                {
                    b.HasOne("Domain.User.User", "EditedBy")
                        .WithMany()
                        .HasForeignKey("EditedById")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Domain.Comment.ReactionGroup", "ReactionGroup")
                        .WithMany("CommentHistories")
                        .HasForeignKey("ReactionGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EditedBy");

                    b.Navigation("ReactionGroup");
                });

            modelBuilder.Entity("Domain.Comment.CommentTag", b =>
                {
                    b.HasOne("Domain.User.User", "PlacedByUser")
                        .WithMany()
                        .HasForeignKey("PlacedByUserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Domain.Project.ProjectTag", "ProjectTag")
                        .WithMany()
                        .HasForeignKey("ProjectTagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Comment.ReactionGroup", "ReactionGroup")
                        .WithMany("CommentTags")
                        .HasForeignKey("ReactionGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PlacedByUser");

                    b.Navigation("ProjectTag");

                    b.Navigation("ReactionGroup");
                });

            modelBuilder.Entity("Domain.Comment.Reaction", b =>
                {
                    b.HasOne("Domain.DocReview.DocReview", "DocReview")
                        .WithMany()
                        .HasForeignKey("DocReviewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Comment.ReactionGroup", "PlacedOnReactionGroup")
                        .WithMany("Reactions")
                        .HasForeignKey("PlacedOnReactionGroupId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.User.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("DocReview");

                    b.Navigation("PlacedOnReactionGroup");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.DocReview.DocReview", b =>
                {
                    b.HasOne("Domain.Project.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.User.User", "WrittenBy")
                        .WithMany()
                        .HasForeignKey("WrittenById")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.OwnsOne("Domain.DocReview.DocReviewSetting", "DocReviewSettings", b1 =>
                        {
                            b1.Property<int>("DocReviewId")
                                .HasColumnType("int");

                            b1.Property<bool>("AreEmojisAllowed")
                                .HasColumnType("tinyint(1)");

                            b1.Property<bool>("IsClosedForComments")
                                .HasColumnType("tinyint(1)");

                            b1.Property<bool>("IsCommentingAllowed")
                                .HasColumnType("tinyint(1)");

                            b1.Property<bool>("IsLogInRequired")
                                .HasColumnType("tinyint(1)");

                            b1.Property<bool>("IsPostModerated")
                                .HasColumnType("tinyint(1)");

                            b1.Property<bool>("IsSubCommentingAllowed")
                                .HasColumnType("tinyint(1)");

                            b1.HasKey("DocReviewId");

                            b1.ToTable("DocReviews");

                            b1.WithOwner()
                                .HasForeignKey("DocReviewId");
                        });

                    b.Navigation("DocReviewSettings")
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("WrittenBy");
                });

            modelBuilder.Entity("Domain.DocReview.DocReviewHistory", b =>
                {
                    b.HasOne("Domain.DocReview.DocReview", "DocReview")
                        .WithMany("DocReviewHistories")
                        .HasForeignKey("DocReviewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.User.User", "Editor")
                        .WithMany()
                        .HasForeignKey("EditorId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("DocReview");

                    b.Navigation("Editor");
                });

            modelBuilder.Entity("Domain.DocReview.Emoji", b =>
                {
                    b.HasOne("Domain.DocReview.DocReview", "DocReview")
                        .WithMany("AvailableEmoji")
                        .HasForeignKey("DocReviewId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("DocReview");
                });

            modelBuilder.Entity("Domain.DocReview.Survey", b =>
                {
                    b.HasOne("Domain.DocReview.DocReview", "DocReview")
                        .WithMany("Surveys")
                        .HasForeignKey("DocReviewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DocReview");
                });

            modelBuilder.Entity("Domain.DocReview.SurveyOption", b =>
                {
                    b.HasOne("Domain.DocReview.Survey", "Survey")
                        .WithMany("SurveyOptions")
                        .HasForeignKey("SurveyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Survey");
                });

            modelBuilder.Entity("Domain.DocReview.UserSurveyAnswer", b =>
                {
                    b.HasOne("Domain.DocReview.SurveyOption", "ChosenOption")
                        .WithMany()
                        .HasForeignKey("ChosenOptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.DocReview.Survey", "Survey")
                        .WithMany()
                        .HasForeignKey("SurveyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.User.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChosenOption");

                    b.Navigation("Survey");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Project.FooterLogo", b =>
                {
                    b.HasOne("Domain.Project.Project", "Project")
                        .WithMany("FooterLogos")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Domain.Project.Project", b =>
                {
                    b.HasOne("Domain.Project.ProjectStyling", "ProjectStyling")
                        .WithOne()
                        .HasForeignKey("Domain.Project.Project", "ProjectStylingId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("ProjectStyling");
                });

            modelBuilder.Entity("Domain.Project.ProjectHistory", b =>
                {
                    b.HasOne("Domain.User.User", "EditedBy")
                        .WithMany()
                        .HasForeignKey("EditedById")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Domain.Project.Project", "Project")
                        .WithMany("ProjectHistories")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EditedBy");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Domain.Project.ProjectStyling", b =>
                {
                    b.HasOne("Domain.Project.ThemeStyles", "ThemeStyle")
                        .WithMany()
                        .HasForeignKey("ThemeStylesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ThemeStyle");
                });

            modelBuilder.Entity("Domain.Project.ProjectTag", b =>
                {
                    b.HasOne("Domain.Project.Project", "Project")
                        .WithMany("ProjectTags")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Domain.Project.ThemeStyles", b =>
                {
                    b.HasOne("Domain.Project.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Domain.Project.TimeLine", b =>
                {
                    b.HasOne("Domain.Project.Project", "Project")
                        .WithOne("TimeLine")
                        .HasForeignKey("Domain.Project.TimeLine", "ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Domain.Project.TimeLinePhase", b =>
                {
                    b.HasOne("Domain.DocReview.DocReview", "DocReview")
                        .WithMany("TimeLinePhases")
                        .HasForeignKey("DocReviewId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Domain.Project.TimeLine", "TimeLine")
                        .WithMany("TimeLinePhases")
                        .HasForeignKey("TimeLineId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("DocReview");

                    b.Navigation("TimeLine");
                });

            modelBuilder.Entity("Domain.ProjectStatistics.CommentStatusTotal", b =>
                {
                    b.HasOne("Domain.ProjectStatistics.ProjectStatistics", "ProjectStatistics")
                        .WithMany("CommentStatusTypeAmount")
                        .HasForeignKey("ProjectStatisticsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProjectStatistics");
                });

            modelBuilder.Entity("Domain.ProjectStatistics.DocReviewStatusTotal", b =>
                {
                    b.HasOne("Domain.ProjectStatistics.ProjectStatistics", "ProjectStatistics")
                        .WithMany("DocReviewStatusTypeAmount")
                        .HasForeignKey("ProjectStatisticsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProjectStatistics");
                });

            modelBuilder.Entity("Domain.ProjectStatistics.EmojiTypeTotal", b =>
                {
                    b.HasOne("Domain.DocReview.Emoji", "Emoji")
                        .WithMany()
                        .HasForeignKey("EmojiId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Domain.ProjectStatistics.ProjectStatistics", "ProjectStatistics")
                        .WithMany("EmojiTypeAmount")
                        .HasForeignKey("ProjectStatisticsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Emoji");

                    b.Navigation("ProjectStatistics");
                });

            modelBuilder.Entity("Domain.ProjectStatistics.ProjectStatistics", b =>
                {
                    b.HasOne("Domain.Project.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Domain.User.UserPropertyName", b =>
                {
                    b.HasOne("Domain.Project.Project", "RegisteredForProject")
                        .WithMany()
                        .HasForeignKey("RegisteredForProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RegisteredForProject");
                });

            modelBuilder.Entity("Domain.User.UserPropertyValue", b =>
                {
                    b.HasOne("Domain.User.User", "User")
                        .WithMany("UserPropertyValues")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.User.UserPropertyName", "UserPropertyName")
                        .WithMany()
                        .HasForeignKey("UserPropertyLabel")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("UserPropertyName");
                });

            modelBuilder.Entity("MarkedEmailProject", b =>
                {
                    b.HasOne("Domain.User.MarkedEmail", null)
                        .WithMany()
                        .HasForeignKey("MarkedEmailsMarkedEmailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Project.Project", null)
                        .WithMany()
                        .HasForeignKey("ProjectsProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Domain.User.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Domain.User.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.User.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Domain.User.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProjectUser", b =>
                {
                    b.HasOne("Domain.Project.Project", null)
                        .WithMany()
                        .HasForeignKey("RegisteredForProjectsProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.User.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Comment.EmojiReaction", b =>
                {
                    b.HasOne("Domain.DocReview.Emoji", "Emoji")
                        .WithMany()
                        .HasForeignKey("EmojiId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Emoji");
                });

            modelBuilder.Entity("Domain.DocReview.DocReview", b =>
                {
                    b.Navigation("AvailableEmoji");

                    b.Navigation("DocReviewHistories");

                    b.Navigation("Surveys");

                    b.Navigation("TimeLinePhases");
                });

            modelBuilder.Entity("Domain.DocReview.Survey", b =>
                {
                    b.Navigation("SurveyOptions");
                });

            modelBuilder.Entity("Domain.Project.Project", b =>
                {
                    b.Navigation("FooterLogos");

                    b.Navigation("ProjectHistories");

                    b.Navigation("ProjectTags");

                    b.Navigation("TimeLine")
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Project.TimeLine", b =>
                {
                    b.Navigation("TimeLinePhases");
                });

            modelBuilder.Entity("Domain.ProjectStatistics.ProjectStatistics", b =>
                {
                    b.Navigation("CommentStatusTypeAmount");

                    b.Navigation("DocReviewStatusTypeAmount");

                    b.Navigation("EmojiTypeAmount");
                });

            modelBuilder.Entity("Domain.User.User", b =>
                {
                    b.Navigation("UserPropertyValues");
                });

            modelBuilder.Entity("Domain.Comment.ReactionGroup", b =>
                {
                    b.Navigation("CommentHistories");

                    b.Navigation("CommentTags");

                    b.Navigation("Reactions");
                });
#pragma warning restore 612, 618
        }
    }
}
